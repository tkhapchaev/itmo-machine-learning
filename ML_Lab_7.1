{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1OopyCF9iczPe-YSEoeuvInbtrh4T6bGG","timestamp":1700732022398},{"file_id":"13LvGfU8uIZ5jmVM4WdVA9KktFhwZLCHq","timestamp":1606675349064}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"vcnGdgw_YJ8u"},"source":["# PyTorch. Основы: синтаксис, torch.cuda и torch.autograd\n","\n","## Задание 7.1"]},{"cell_type":"code","metadata":{"id":"RtyozNmmYJ89","executionInfo":{"status":"ok","timestamp":1701869755096,"user_tz":-180,"elapsed":376,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}}},"source":["import torch\n","import matplotlib.pyplot as plt\n","from torch.autograd import Variable"],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ny4-Qi2wYJ-6"},"source":["### Задача 1"]},{"cell_type":"markdown","metadata":{"id":"IWxlFq0bYJ-_"},"source":["1). Создайте два вещественных тензора: `a` размером (3, 4) и `b` размером (12,)   \n","2). Создайте тензор `c`, являющийся тензором `b`, но размера (2, 2, 3)  \n","3). Выведите первый столбец матрицы `a` с помощью индексации"]},{"cell_type":"code","metadata":{"id":"3oxZuk3yYJ_A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701868778968,"user_tz":-180,"elapsed":320,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"e993a134-b573-43ae-8ef7-3e4af1eaed0a"},"source":["a = torch.randn((3, 4))\n","b = torch.randn(12)\n","c = b.view(2, 2, 3)\n","\n","a[:, 0]"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([ 0.2655,  0.0401, -0.3475])"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"D2IP_FrKYKAA"},"source":["### Задача 2"]},{"cell_type":"markdown","metadata":{"id":"tBZFbSYQYKAA"},"source":["1). Создайте два вещественных тензора: `a` размером (5, 2) и `b` размером (1,10)   \n","2). Создайте тензор `c`, являющийся тензором `b`, но размера (5, 2)  \n","3). Произведите все арифметические операции с тензорами `a` и `c`"]},{"cell_type":"code","metadata":{"id":"hzs2bH3GYKAB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701869084078,"user_tz":-180,"elapsed":2,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"7125e34d-cc15-45a4-8448-36ab2eef9dbb"},"source":["a = torch.randn((5, 2))\n","b = torch.randn((1, 10))\n","\n","print(a, \"\\n\")\n","print(b)"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[ 2.4765,  2.4901],\n","        [ 0.0166,  0.6810],\n","        [-0.8893, -0.4589],\n","        [-0.8865, -0.4803],\n","        [-1.3122, -0.7694]]) \n","\n","tensor([[-0.1741, -0.5167,  1.0460, -1.2618,  0.3724, -0.8151, -0.5355,  0.8017,\n","          0.0955,  0.6849]])\n"]}]},{"cell_type":"code","source":["c = b.view(5, 2)\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KTMU8Z7lSo9h","executionInfo":{"status":"ok","timestamp":1701869086576,"user_tz":-180,"elapsed":3,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"8733ab3c-99a7-4b9d-f2ab-4c3ccfae03e0"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.1741, -0.5167],\n","        [ 1.0460, -1.2618],\n","        [ 0.3724, -0.8151],\n","        [-0.5355,  0.8017],\n","        [ 0.0955,  0.6849]])\n"]}]},{"cell_type":"code","source":["print(a + c, \"\\n\")\n","print(a - c, \"\\n\")\n","print(a * c, \"\\n\")\n","print(a / c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gr7z1aP9S634","executionInfo":{"status":"ok","timestamp":1701869088753,"user_tz":-180,"elapsed":4,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"e59a3822-ee34-4916-dea4-636654c7ffae"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[ 2.3025,  1.9734],\n","        [ 1.0626, -0.5808],\n","        [-0.5169, -1.2740],\n","        [-1.4220,  0.3214],\n","        [-1.2166, -0.0845]]) \n","\n","tensor([[ 2.6506,  3.0068],\n","        [-1.0294,  1.9427],\n","        [-1.2617,  0.3562],\n","        [-0.3510, -1.2820],\n","        [-1.4077, -1.4543]]) \n","\n","tensor([[-0.4311, -1.2866],\n","        [ 0.0174, -0.8592],\n","        [-0.3312,  0.3740],\n","        [ 0.4747, -0.3850],\n","        [-0.1253, -0.5269]]) \n","\n","tensor([[-14.2283,  -4.8192],\n","        [  0.0159,  -0.5397],\n","        [ -2.3882,   0.5630],\n","        [  1.6555,  -0.5991],\n","        [-13.7356,  -1.1234]])\n"]}]},{"cell_type":"markdown","metadata":{"id":"rIaroFO6YKBT"},"source":["### Задача 3"]},{"cell_type":"markdown","metadata":{"id":"GfLHVvKvYKBT"},"source":["1). Создайте тензор *целых чисел* `images` размерности (100, 200, 200, 3) (можно интерпретировать это как 100 картинок размера 200х200 с тремя цветовыми каналами, то есть 100 цветных изображений 200х200). Заполните его нулями  \n","\n","2). Сделайте так, чтобы у $i$-ой по порядку картинки была нарисована белая полоса толщиной два пикселя в строках, которые соответствуют номеру картинки. Например, у 3-ей по порядку картинки белая полоска будет занимать 6 и 7 строки, у 99 - 198 и 199. Сделать белую строку можно, записав в ячейки тензора число 255 (по всем трём каналам). Выведите несколько примеров с помощью `pylot`  \n","\n","3). Посчитайте среднее тензора `images` по 1-ой оси (по сути - средняя картинка), умножьте полученный тензор на 70. Нарисуйте с помощью `pyplot`, должна получиться серая картинка (при взятии среднего нужно привести тензор к float с помощью `.float()`, при отрисовке обратно к int с помощью `.int()`)"]},{"cell_type":"code","metadata":{"id":"pZVGHEQQYKBU","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"ok","timestamp":1701869282794,"user_tz":-180,"elapsed":1670,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"63a62499-e6f2-4648-97e7-290f99b5b22e"},"source":["images = torch.zeros((100, 200, 200, 3), dtype=torch.uint8)\n","\n","for i in range(100):\n","    images[i, i * 2:i * 2 + 2, :, :] = 255\n","\n","mean_image = (images.float().mean(dim=0) * 70).int()\n","fig, axes = plt.subplots(1, 3, figsize=(12, 4))\n","\n","axes[0].imshow(images[0])\n","axes[0].set_title(\"Image 0\")\n","\n","axes[1].imshow(images[3])\n","axes[1].set_title(\"Image 3\")\n","\n","axes[2].imshow(images[99])\n","axes[2].set_title(\"Image 99\")"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Image 99')"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.show()\n","\n","plt.imshow(mean_image)\n","plt.title(\"Mean Image * 70\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"id":"Z081tWJcUFVi","executionInfo":{"status":"ok","timestamp":1701869291127,"user_tz":-180,"elapsed":484,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"7405240d-83bb-4493-a088-cccd5e1cb043"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"oQnhq5ZdYKCu"},"source":["### Задача 4"]},{"cell_type":"markdown","metadata":{"id":"UB95BhgTYKCu"},"source":["- В Colab нажмите в меню сверху: `Runtime` -> `Change Runtime Type` -> `GPU`, где изначально стоит `None` (`Среда выполнение` - `Сменить среду выполнения`)\n","- Объявите тензор `a` размера (2, 3, 4) и тензор `b` размера (1, 8, 3) на GPU, иницилизируйте их случайно равномерно (`.uniform_()`)\n","- Затем измените форму тензора `b`, чтобы она совпадала с формой тензора `a`, получите тензор `c`  \n","- Переместите `c` на CPU, переместите `a` на CPU  \n","- Оберните их в `Variable()`\n","- Объявите тензор `L = torch.mean((c - a) `**` 2)` и посчитайте градиент `L` по `c` ( то есть $\\frac{\\partial{L}}{\\partial{c}})$\n","- Выведите градиент `L` по `c`"]},{"cell_type":"code","metadata":{"id":"WESOm5TCYKCv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701870051407,"user_tz":-180,"elapsed":2040,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"dc52e3e6-b924-4682-c402-b4a6d5e91bfb"},"source":["a = torch.FloatTensor(2, 3, 4).uniform_().cuda()\n","b = torch.FloatTensor(1, 8, 3).uniform_().cuda()\n","\n","print(a, \"\\n\")\n","print(b)"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[0.8372, 0.7473, 0.9442, 0.0171],\n","         [0.1123, 0.6333, 0.0665, 0.0999],\n","         [0.5978, 0.0725, 0.4351, 0.6476]],\n","\n","        [[0.7555, 0.7916, 0.4755, 0.5628],\n","         [0.6577, 0.5465, 0.1235, 0.3223],\n","         [0.6188, 0.1561, 0.0752, 0.0178]]], device='cuda:0') \n","\n","tensor([[[0.3830, 0.2806, 0.1293],\n","         [0.8352, 0.1568, 0.2530],\n","         [0.8861, 0.4243, 0.1961],\n","         [0.8321, 0.7596, 0.0344],\n","         [0.1271, 0.4572, 0.7465],\n","         [0.1499, 0.7557, 0.5011],\n","         [0.4082, 0.9991, 0.3589],\n","         [0.1789, 0.6109, 0.9165]]], device='cuda:0')\n"]}]},{"cell_type":"code","source":["c = b.view(2, 3, 4)\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bUimoY8HWl-U","executionInfo":{"status":"ok","timestamp":1701870062314,"user_tz":-180,"elapsed":337,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"79fb4574-96b4-4906-f937-a2fb044f8cb9"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[0.3830, 0.2806, 0.1293, 0.8352],\n","         [0.1568, 0.2530, 0.8861, 0.4243],\n","         [0.1961, 0.8321, 0.7596, 0.0344]],\n","\n","        [[0.1271, 0.4572, 0.7465, 0.1499],\n","         [0.7557, 0.5011, 0.4082, 0.9991],\n","         [0.3589, 0.1789, 0.6109, 0.9165]]], device='cuda:0')\n"]}]},{"cell_type":"code","source":["c = c.cpu()\n","a = a.cpu()\n","\n","a = Variable(a, requires_grad=True)\n","c = Variable(c, requires_grad=True)\n","\n","L = torch.mean((c - a) ** 2)\n","L.backward()\n","\n","print(c.grad)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OhteIPXAWsQn","executionInfo":{"status":"ok","timestamp":1701870066153,"user_tz":-180,"elapsed":309,"user":{"displayName":"Timur Khapchaev","userId":"00723514413173892179"}},"outputId":"0d8456a7-626a-44f6-de23-b0236010e43e"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[-0.0378, -0.0389, -0.0679,  0.0682],\n","         [ 0.0037, -0.0317,  0.0683,  0.0270],\n","         [-0.0335,  0.0633,  0.0270, -0.0511]],\n","\n","        [[-0.0524, -0.0279,  0.0226, -0.0344],\n","         [ 0.0082, -0.0038,  0.0237,  0.0564],\n","         [-0.0217,  0.0019,  0.0446,  0.0749]]])\n"]}]}]}